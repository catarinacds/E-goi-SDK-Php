<?php
/**
 * FormsApi
 * PHP version 5
 *
 * @category Class
 * @package  org.egoi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (Beta)
 *
 * # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace org.egoi.client\org.egoi.client.api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use org.egoi.client\ApiException;
use org.egoi.client\Configuration;
use org.egoi.client\HeaderSelector;
use org.egoi.client\ObjectSerializer;

/**
 * FormsApi Class Doc Comment
 *
 * @category Class
 * @package  org.egoi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FormsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAllForms
     *
     * Get all forms
     *
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order forms (optional, default to 'form_id')
     * @param  string $language Language of the form (optional)
     * @param  int $list_id ID of the list that owns the form (optional)
     * @param  int $owner User ID of the form owner (optional)
     * @param  string $status Status filter (optional)
     * @param  \DateTime $created_min Created initial date (optional)
     * @param  \DateTime $created_max Created finish (optional)
     * @param  \DateTime $updated_min Updated initial (optional)
     * @param  \DateTime $updated_max Updated finish (optional)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \org.egoi.client\org.egoi.client.model\FormCollection|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError
     */
    public function getAllForms($offset = null, $limit = 10, $order = 'desc', $order_by = 'form_id', $language = null, $list_id = null, $owner = null, $status = null, $created_min = null, $created_max = null, $updated_min = null, $updated_max = null)
    {
        list($response) = $this->getAllFormsWithHttpInfo($offset, $limit, $order, $order_by, $language, $list_id, $owner, $status, $created_min, $created_max, $updated_min, $updated_max);
        return $response;
    }

    /**
     * Operation getAllFormsWithHttpInfo
     *
     * Get all forms
     *
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order forms (optional, default to 'form_id')
     * @param  string $language Language of the form (optional)
     * @param  int $list_id ID of the list that owns the form (optional)
     * @param  int $owner User ID of the form owner (optional)
     * @param  string $status Status filter (optional)
     * @param  \DateTime $created_min Created initial date (optional)
     * @param  \DateTime $created_max Created finish (optional)
     * @param  \DateTime $updated_min Updated initial (optional)
     * @param  \DateTime $updated_max Updated finish (optional)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \org.egoi.client\org.egoi.client.model\FormCollection|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllFormsWithHttpInfo($offset = null, $limit = 10, $order = 'desc', $order_by = 'form_id', $language = null, $list_id = null, $owner = null, $status = null, $created_min = null, $created_max = null, $updated_min = null, $updated_max = null)
    {
        $request = $this->getAllFormsRequest($offset, $limit, $order, $order_by, $language, $list_id, $owner, $status, $created_min, $created_max, $updated_min, $updated_max);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\org.egoi.client\org.egoi.client.model\FormCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\FormCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\org.egoi.client\org.egoi.client.model\Unauthorized' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\org.egoi.client\org.egoi.client.model\Forbidden' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\org.egoi.client\org.egoi.client.model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\org.egoi.client\org.egoi.client.model\InternalServerError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\org.egoi.client\org.egoi.client.model\FormCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\FormCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllFormsAsync
     *
     * Get all forms
     *
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order forms (optional, default to 'form_id')
     * @param  string $language Language of the form (optional)
     * @param  int $list_id ID of the list that owns the form (optional)
     * @param  int $owner User ID of the form owner (optional)
     * @param  string $status Status filter (optional)
     * @param  \DateTime $created_min Created initial date (optional)
     * @param  \DateTime $created_max Created finish (optional)
     * @param  \DateTime $updated_min Updated initial (optional)
     * @param  \DateTime $updated_max Updated finish (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllFormsAsync($offset = null, $limit = 10, $order = 'desc', $order_by = 'form_id', $language = null, $list_id = null, $owner = null, $status = null, $created_min = null, $created_max = null, $updated_min = null, $updated_max = null)
    {
        return $this->getAllFormsAsyncWithHttpInfo($offset, $limit, $order, $order_by, $language, $list_id, $owner, $status, $created_min, $created_max, $updated_min, $updated_max)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllFormsAsyncWithHttpInfo
     *
     * Get all forms
     *
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order forms (optional, default to 'form_id')
     * @param  string $language Language of the form (optional)
     * @param  int $list_id ID of the list that owns the form (optional)
     * @param  int $owner User ID of the form owner (optional)
     * @param  string $status Status filter (optional)
     * @param  \DateTime $created_min Created initial date (optional)
     * @param  \DateTime $created_max Created finish (optional)
     * @param  \DateTime $updated_min Updated initial (optional)
     * @param  \DateTime $updated_max Updated finish (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllFormsAsyncWithHttpInfo($offset = null, $limit = 10, $order = 'desc', $order_by = 'form_id', $language = null, $list_id = null, $owner = null, $status = null, $created_min = null, $created_max = null, $updated_min = null, $updated_max = null)
    {
        $returnType = '\org.egoi.client\org.egoi.client.model\FormCollection';
        $request = $this->getAllFormsRequest($offset, $limit, $order, $order_by, $language, $list_id, $owner, $status, $created_min, $created_max, $updated_min, $updated_max);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllForms'
     *
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order forms (optional, default to 'form_id')
     * @param  string $language Language of the form (optional)
     * @param  int $list_id ID of the list that owns the form (optional)
     * @param  int $owner User ID of the form owner (optional)
     * @param  string $status Status filter (optional)
     * @param  \DateTime $created_min Created initial date (optional)
     * @param  \DateTime $created_max Created finish (optional)
     * @param  \DateTime $updated_min Updated initial (optional)
     * @param  \DateTime $updated_max Updated finish (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllFormsRequest($offset = null, $limit = 10, $order = 'desc', $order_by = 'form_id', $language = null, $list_id = null, $owner = null, $status = null, $created_min = null, $created_max = null, $updated_min = null, $updated_max = null)
    {
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FormsApi.getAllForms, must be bigger than or equal to 0.');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FormsApi.getAllForms, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FormsApi.getAllForms, must be bigger than or equal to 1.');
        }

        if ($list_id !== null && $list_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$list_id" when calling FormsApi.getAllForms, must be bigger than or equal to 1.');
        }

        if ($owner !== null && $owner < 1) {
            throw new \InvalidArgumentException('invalid value for "$owner" when calling FormsApi.getAllForms, must be bigger than or equal to 1.');
        }


        $resourcePath = '/forms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($list_id !== null) {
            $queryParams['list_id'] = ObjectSerializer::toQueryValue($list_id);
        }
        // query params
        if ($owner !== null) {
            $queryParams['owner'] = ObjectSerializer::toQueryValue($owner);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created_min !== null) {
            $queryParams['created_min'] = ObjectSerializer::toQueryValue($created_min);
        }
        // query params
        if ($created_max !== null) {
            $queryParams['created_max'] = ObjectSerializer::toQueryValue($created_max);
        }
        // query params
        if ($updated_min !== null) {
            $queryParams['updated_min'] = ObjectSerializer::toQueryValue($updated_min);
        }
        // query params
        if ($updated_max !== null) {
            $queryParams['updated_max'] = ObjectSerializer::toQueryValue($updated_max);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
