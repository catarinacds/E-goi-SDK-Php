<?php
/**
 * AutomationsApi
 * PHP version 5
 *
 * @category Class
 * @package  org.egoi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (Beta)
 *
 * # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace org.egoi.client\org.egoi.client.api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use org.egoi.client\ApiException;
use org.egoi.client\Configuration;
use org.egoi.client\HeaderSelector;
use org.egoi.client\ObjectSerializer;

/**
 * AutomationsApi Class Doc Comment
 *
 * @category Class
 * @package  org.egoi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AutomationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAutomation
     *
     * Create new automation
     *
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \org.egoi.client\org.egoi.client.model\Automation|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError
     */
    public function createAutomation($automation)
    {
        list($response) = $this->createAutomationWithHttpInfo($automation);
        return $response;
    }

    /**
     * Operation createAutomationWithHttpInfo
     *
     * Create new automation
     *
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \org.egoi.client\org.egoi.client.model\Automation|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAutomationWithHttpInfo($automation)
    {
        $request = $this->createAutomationRequest($automation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\org.egoi.client\org.egoi.client.model\Automation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Automation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\org.egoi.client\org.egoi.client.model\BadRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\org.egoi.client\org.egoi.client.model\Unauthorized' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\org.egoi.client\org.egoi.client.model\Forbidden' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\org.egoi.client\org.egoi.client.model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\org.egoi.client\org.egoi.client.model\InternalServerError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\org.egoi.client\org.egoi.client.model\Automation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Automation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAutomationAsync
     *
     * Create new automation
     *
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAutomationAsync($automation)
    {
        return $this->createAutomationAsyncWithHttpInfo($automation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAutomationAsyncWithHttpInfo
     *
     * Create new automation
     *
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAutomationAsyncWithHttpInfo($automation)
    {
        $returnType = '\org.egoi.client\org.egoi.client.model\Automation';
        $request = $this->createAutomationRequest($automation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAutomation'
     *
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAutomationRequest($automation)
    {
        // verify the required parameter 'automation' is set
        if ($automation === null || (is_array($automation) && count($automation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $automation when calling createAutomation'
            );
        }

        $resourcePath = '/automations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($automation)) {
            $_tempBody = $automation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAutomation
     *
     * Remove automation
     *
     * @param  int $automation_id ID of the Automation (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAutomation($automation_id)
    {
        $this->deleteAutomationWithHttpInfo($automation_id);
    }

    /**
     * Operation deleteAutomationWithHttpInfo
     *
     * Remove automation
     *
     * @param  int $automation_id ID of the Automation (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAutomationWithHttpInfo($automation_id)
    {
        $request = $this->deleteAutomationRequest($automation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Conflict',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAutomationAsync
     *
     * Remove automation
     *
     * @param  int $automation_id ID of the Automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAutomationAsync($automation_id)
    {
        return $this->deleteAutomationAsyncWithHttpInfo($automation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAutomationAsyncWithHttpInfo
     *
     * Remove automation
     *
     * @param  int $automation_id ID of the Automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAutomationAsyncWithHttpInfo($automation_id)
    {
        $returnType = '';
        $request = $this->deleteAutomationRequest($automation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAutomation'
     *
     * @param  int $automation_id ID of the Automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAutomationRequest($automation_id)
    {
        // verify the required parameter 'automation_id' is set
        if ($automation_id === null || (is_array($automation_id) && count($automation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $automation_id when calling deleteAutomation'
            );
        }
        if ($automation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$automation_id" when calling AutomationsApi.deleteAutomation, must be bigger than or equal to 1.');
        }


        $resourcePath = '/automations/{automation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($automation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'automation_id' . '}',
                ObjectSerializer::toPathValue($automation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllAutomations
     *
     * Get all automations
     *
     * @param  int $automation_id Reference attribute to automation id (optional)
     * @param  string $title Reference attribute to title (optional)
     * @param  int $created_by Reference attribute to created by (optional)
     * @param  int $list_id ID of the list that owns the automation (optional)
     * @param  string $status Automation status (optional)
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order automations (optional, default to 'automation_id')
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \org.egoi.client\org.egoi.client.model\AutomationCollection|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError
     */
    public function getAllAutomations($automation_id = null, $title = null, $created_by = null, $list_id = null, $status = null, $offset = null, $limit = 10, $order = 'desc', $order_by = 'automation_id')
    {
        list($response) = $this->getAllAutomationsWithHttpInfo($automation_id, $title, $created_by, $list_id, $status, $offset, $limit, $order, $order_by);
        return $response;
    }

    /**
     * Operation getAllAutomationsWithHttpInfo
     *
     * Get all automations
     *
     * @param  int $automation_id Reference attribute to automation id (optional)
     * @param  string $title Reference attribute to title (optional)
     * @param  int $created_by Reference attribute to created by (optional)
     * @param  int $list_id ID of the list that owns the automation (optional)
     * @param  string $status Automation status (optional)
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order automations (optional, default to 'automation_id')
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \org.egoi.client\org.egoi.client.model\AutomationCollection|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllAutomationsWithHttpInfo($automation_id = null, $title = null, $created_by = null, $list_id = null, $status = null, $offset = null, $limit = 10, $order = 'desc', $order_by = 'automation_id')
    {
        $request = $this->getAllAutomationsRequest($automation_id, $title, $created_by, $list_id, $status, $offset, $limit, $order, $order_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\org.egoi.client\org.egoi.client.model\AutomationCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\AutomationCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\org.egoi.client\org.egoi.client.model\Unauthorized' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\org.egoi.client\org.egoi.client.model\Forbidden' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\org.egoi.client\org.egoi.client.model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\org.egoi.client\org.egoi.client.model\InternalServerError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\org.egoi.client\org.egoi.client.model\AutomationCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\AutomationCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllAutomationsAsync
     *
     * Get all automations
     *
     * @param  int $automation_id Reference attribute to automation id (optional)
     * @param  string $title Reference attribute to title (optional)
     * @param  int $created_by Reference attribute to created by (optional)
     * @param  int $list_id ID of the list that owns the automation (optional)
     * @param  string $status Automation status (optional)
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order automations (optional, default to 'automation_id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAutomationsAsync($automation_id = null, $title = null, $created_by = null, $list_id = null, $status = null, $offset = null, $limit = 10, $order = 'desc', $order_by = 'automation_id')
    {
        return $this->getAllAutomationsAsyncWithHttpInfo($automation_id, $title, $created_by, $list_id, $status, $offset, $limit, $order, $order_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllAutomationsAsyncWithHttpInfo
     *
     * Get all automations
     *
     * @param  int $automation_id Reference attribute to automation id (optional)
     * @param  string $title Reference attribute to title (optional)
     * @param  int $created_by Reference attribute to created by (optional)
     * @param  int $list_id ID of the list that owns the automation (optional)
     * @param  string $status Automation status (optional)
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order automations (optional, default to 'automation_id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAutomationsAsyncWithHttpInfo($automation_id = null, $title = null, $created_by = null, $list_id = null, $status = null, $offset = null, $limit = 10, $order = 'desc', $order_by = 'automation_id')
    {
        $returnType = '\org.egoi.client\org.egoi.client.model\AutomationCollection';
        $request = $this->getAllAutomationsRequest($automation_id, $title, $created_by, $list_id, $status, $offset, $limit, $order, $order_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllAutomations'
     *
     * @param  int $automation_id Reference attribute to automation id (optional)
     * @param  string $title Reference attribute to title (optional)
     * @param  int $created_by Reference attribute to created by (optional)
     * @param  int $list_id ID of the list that owns the automation (optional)
     * @param  string $status Automation status (optional)
     * @param  int $offset Element offset (starting at zero for the first element) (optional)
     * @param  int $limit Number of items to return (optional, default to 10)
     * @param  string $order Type of order (optional, default to 'desc')
     * @param  string $order_by Reference attribute to order automations (optional, default to 'automation_id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllAutomationsRequest($automation_id = null, $title = null, $created_by = null, $list_id = null, $status = null, $offset = null, $limit = 10, $order = 'desc', $order_by = 'automation_id')
    {
        if ($list_id !== null && $list_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$list_id" when calling AutomationsApi.getAllAutomations, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling AutomationsApi.getAllAutomations, must be bigger than or equal to 0.');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AutomationsApi.getAllAutomations, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AutomationsApi.getAllAutomations, must be bigger than or equal to 1.');
        }


        $resourcePath = '/automations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($automation_id !== null) {
            $queryParams['automation_id'] = ObjectSerializer::toQueryValue($automation_id);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($created_by !== null) {
            $queryParams['created_by'] = ObjectSerializer::toQueryValue($created_by);
        }
        // query params
        if ($list_id !== null) {
            $queryParams['list_id'] = ObjectSerializer::toQueryValue($list_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAutomation
     *
     * Update a specific automation
     *
     * @param  int $automation_id ID of the Automation (required)
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \org.egoi.client\org.egoi.client.model\Automation|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\NotFound|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError
     */
    public function updateAutomation($automation_id, $automation)
    {
        list($response) = $this->updateAutomationWithHttpInfo($automation_id, $automation);
        return $response;
    }

    /**
     * Operation updateAutomationWithHttpInfo
     *
     * Update a specific automation
     *
     * @param  int $automation_id ID of the Automation (required)
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \org.egoi.client\org.egoi.client.model\Automation|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\NotFound|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAutomationWithHttpInfo($automation_id, $automation)
    {
        $request = $this->updateAutomationRequest($automation_id, $automation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\org.egoi.client\org.egoi.client.model\Automation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Automation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\org.egoi.client\org.egoi.client.model\BadRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\org.egoi.client\org.egoi.client.model\Unauthorized' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\org.egoi.client\org.egoi.client.model\Forbidden' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\org.egoi.client\org.egoi.client.model\NotFound' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\org.egoi.client\org.egoi.client.model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\org.egoi.client\org.egoi.client.model\InternalServerError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\org.egoi.client\org.egoi.client.model\Automation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Automation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAutomationAsync
     *
     * Update a specific automation
     *
     * @param  int $automation_id ID of the Automation (required)
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAutomationAsync($automation_id, $automation)
    {
        return $this->updateAutomationAsyncWithHttpInfo($automation_id, $automation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAutomationAsyncWithHttpInfo
     *
     * Update a specific automation
     *
     * @param  int $automation_id ID of the Automation (required)
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAutomationAsyncWithHttpInfo($automation_id, $automation)
    {
        $returnType = '\org.egoi.client\org.egoi.client.model\Automation';
        $request = $this->updateAutomationRequest($automation_id, $automation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAutomation'
     *
     * @param  int $automation_id ID of the Automation (required)
     * @param  \org.egoi.client\org.egoi.client.model\Automation $automation Parameters for the automation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAutomationRequest($automation_id, $automation)
    {
        // verify the required parameter 'automation_id' is set
        if ($automation_id === null || (is_array($automation_id) && count($automation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $automation_id when calling updateAutomation'
            );
        }
        if ($automation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$automation_id" when calling AutomationsApi.updateAutomation, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'automation' is set
        if ($automation === null || (is_array($automation) && count($automation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $automation when calling updateAutomation'
            );
        }

        $resourcePath = '/automations/{automation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($automation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'automation_id' . '}',
                ObjectSerializer::toPathValue($automation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($automation)) {
            $_tempBody = $automation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
