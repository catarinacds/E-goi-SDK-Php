<?php
/**
 * VoiceApi
 * PHP version 5
 *
 * @category Class
 * @package  org.egoi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (Beta)
 *
 * # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace org.egoi.client\org.egoi.client.api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use org.egoi.client\ApiException;
use org.egoi.client\Configuration;
use org.egoi.client\HeaderSelector;
use org.egoi.client\ObjectSerializer;

/**
 * VoiceApi Class Doc Comment
 *
 * @category Class
 * @package  org.egoi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VoiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation actionSendVoice
     *
     * Send voice message
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\CampaignVoiceSendRequest $campaign_voice_send_request Parameters for the &#39;send voice&#39; action (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \org.egoi.client\org.egoi.client.model\AcceptedResponse|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError
     */
    public function actionSendVoice($campaign_hash, $campaign_voice_send_request)
    {
        list($response) = $this->actionSendVoiceWithHttpInfo($campaign_hash, $campaign_voice_send_request);
        return $response;
    }

    /**
     * Operation actionSendVoiceWithHttpInfo
     *
     * Send voice message
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\CampaignVoiceSendRequest $campaign_voice_send_request Parameters for the &#39;send voice&#39; action (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \org.egoi.client\org.egoi.client.model\AcceptedResponse|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionSendVoiceWithHttpInfo($campaign_hash, $campaign_voice_send_request)
    {
        $request = $this->actionSendVoiceRequest($campaign_hash, $campaign_voice_send_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\org.egoi.client\org.egoi.client.model\AcceptedResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\AcceptedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\org.egoi.client\org.egoi.client.model\BadRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\org.egoi.client\org.egoi.client.model\Unauthorized' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\org.egoi.client\org.egoi.client.model\Forbidden' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\org.egoi.client\org.egoi.client.model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\org.egoi.client\org.egoi.client.model\InternalServerError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\org.egoi.client\org.egoi.client.model\AcceptedResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\AcceptedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation actionSendVoiceAsync
     *
     * Send voice message
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\CampaignVoiceSendRequest $campaign_voice_send_request Parameters for the &#39;send voice&#39; action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionSendVoiceAsync($campaign_hash, $campaign_voice_send_request)
    {
        return $this->actionSendVoiceAsyncWithHttpInfo($campaign_hash, $campaign_voice_send_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionSendVoiceAsyncWithHttpInfo
     *
     * Send voice message
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\CampaignVoiceSendRequest $campaign_voice_send_request Parameters for the &#39;send voice&#39; action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionSendVoiceAsyncWithHttpInfo($campaign_hash, $campaign_voice_send_request)
    {
        $returnType = '\org.egoi.client\org.egoi.client.model\AcceptedResponse';
        $request = $this->actionSendVoiceRequest($campaign_hash, $campaign_voice_send_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionSendVoice'
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\CampaignVoiceSendRequest $campaign_voice_send_request Parameters for the &#39;send voice&#39; action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function actionSendVoiceRequest($campaign_hash, $campaign_voice_send_request)
    {
        // verify the required parameter 'campaign_hash' is set
        if ($campaign_hash === null || (is_array($campaign_hash) && count($campaign_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_hash when calling actionSendVoice'
            );
        }
        if (!preg_match("/[a-zA-Z0-9_-]*/", $campaign_hash)) {
            throw new \InvalidArgumentException("invalid value for \"campaign_hash\" when calling VoiceApi.actionSendVoice, must conform to the pattern /[a-zA-Z0-9_-]*/.");
        }

        // verify the required parameter 'campaign_voice_send_request' is set
        if ($campaign_voice_send_request === null || (is_array($campaign_voice_send_request) && count($campaign_voice_send_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_voice_send_request when calling actionSendVoice'
            );
        }

        $resourcePath = '/campaigns/voice/{campaign_hash}/actions/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($campaign_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_hash' . '}',
                ObjectSerializer::toPathValue($campaign_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($campaign_voice_send_request)) {
            $_tempBody = $campaign_voice_send_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createVoiceCampaign
     *
     * Create new voice campaign
     *
     * @param  \org.egoi.client\org.egoi.client.model\VoiceCampaign $voice_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \org.egoi.client\org.egoi.client.model\CampaignHash|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\Conflict|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError
     */
    public function createVoiceCampaign($voice_campaign)
    {
        list($response) = $this->createVoiceCampaignWithHttpInfo($voice_campaign);
        return $response;
    }

    /**
     * Operation createVoiceCampaignWithHttpInfo
     *
     * Create new voice campaign
     *
     * @param  \org.egoi.client\org.egoi.client.model\VoiceCampaign $voice_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \org.egoi.client\org.egoi.client.model\CampaignHash|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\Conflict|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVoiceCampaignWithHttpInfo($voice_campaign)
    {
        $request = $this->createVoiceCampaignRequest($voice_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\org.egoi.client\org.egoi.client.model\CampaignHash' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\CampaignHash', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\org.egoi.client\org.egoi.client.model\BadRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\org.egoi.client\org.egoi.client.model\Unauthorized' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\org.egoi.client\org.egoi.client.model\Forbidden' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\org.egoi.client\org.egoi.client.model\Conflict' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Conflict', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\org.egoi.client\org.egoi.client.model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\org.egoi.client\org.egoi.client.model\InternalServerError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\org.egoi.client\org.egoi.client.model\CampaignHash';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\CampaignHash',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Conflict',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createVoiceCampaignAsync
     *
     * Create new voice campaign
     *
     * @param  \org.egoi.client\org.egoi.client.model\VoiceCampaign $voice_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVoiceCampaignAsync($voice_campaign)
    {
        return $this->createVoiceCampaignAsyncWithHttpInfo($voice_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVoiceCampaignAsyncWithHttpInfo
     *
     * Create new voice campaign
     *
     * @param  \org.egoi.client\org.egoi.client.model\VoiceCampaign $voice_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVoiceCampaignAsyncWithHttpInfo($voice_campaign)
    {
        $returnType = '\org.egoi.client\org.egoi.client.model\CampaignHash';
        $request = $this->createVoiceCampaignRequest($voice_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVoiceCampaign'
     *
     * @param  \org.egoi.client\org.egoi.client.model\VoiceCampaign $voice_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createVoiceCampaignRequest($voice_campaign)
    {
        // verify the required parameter 'voice_campaign' is set
        if ($voice_campaign === null || (is_array($voice_campaign) && count($voice_campaign) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voice_campaign when calling createVoiceCampaign'
            );
        }

        $resourcePath = '/campaigns/voice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($voice_campaign)) {
            $_tempBody = $voice_campaign;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchVoiceCampaign
     *
     * Update a specific voice campaign
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\VoicePatchCampaign $voice_patch_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \org.egoi.client\org.egoi.client.model\CampaignHash|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\NotFound|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError
     */
    public function patchVoiceCampaign($campaign_hash, $voice_patch_campaign)
    {
        list($response) = $this->patchVoiceCampaignWithHttpInfo($campaign_hash, $voice_patch_campaign);
        return $response;
    }

    /**
     * Operation patchVoiceCampaignWithHttpInfo
     *
     * Update a specific voice campaign
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\VoicePatchCampaign $voice_patch_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \org.egoi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \org.egoi.client\org.egoi.client.model\CampaignHash|\org.egoi.client\org.egoi.client.model\BadRequest|\org.egoi.client\org.egoi.client.model\Unauthorized|\org.egoi.client\org.egoi.client.model\Forbidden|\org.egoi.client\org.egoi.client.model\NotFound|\org.egoi.client\org.egoi.client.model\UnprocessableEntity|\org.egoi.client\org.egoi.client.model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchVoiceCampaignWithHttpInfo($campaign_hash, $voice_patch_campaign)
    {
        $request = $this->patchVoiceCampaignRequest($campaign_hash, $voice_patch_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\org.egoi.client\org.egoi.client.model\CampaignHash' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\CampaignHash', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\org.egoi.client\org.egoi.client.model\BadRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\org.egoi.client\org.egoi.client.model\Unauthorized' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\org.egoi.client\org.egoi.client.model\Forbidden' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\org.egoi.client\org.egoi.client.model\NotFound' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\org.egoi.client\org.egoi.client.model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\org.egoi.client\org.egoi.client.model\InternalServerError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\org.egoi.client\org.egoi.client.model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\org.egoi.client\org.egoi.client.model\CampaignHash';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\CampaignHash',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\org.egoi.client\org.egoi.client.model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchVoiceCampaignAsync
     *
     * Update a specific voice campaign
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\VoicePatchCampaign $voice_patch_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchVoiceCampaignAsync($campaign_hash, $voice_patch_campaign)
    {
        return $this->patchVoiceCampaignAsyncWithHttpInfo($campaign_hash, $voice_patch_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchVoiceCampaignAsyncWithHttpInfo
     *
     * Update a specific voice campaign
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\VoicePatchCampaign $voice_patch_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchVoiceCampaignAsyncWithHttpInfo($campaign_hash, $voice_patch_campaign)
    {
        $returnType = '\org.egoi.client\org.egoi.client.model\CampaignHash';
        $request = $this->patchVoiceCampaignRequest($campaign_hash, $voice_patch_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchVoiceCampaign'
     *
     * @param  string $campaign_hash ID of the Campaign (required)
     * @param  \org.egoi.client\org.egoi.client.model\VoicePatchCampaign $voice_patch_campaign Parameters for the Voice Campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchVoiceCampaignRequest($campaign_hash, $voice_patch_campaign)
    {
        // verify the required parameter 'campaign_hash' is set
        if ($campaign_hash === null || (is_array($campaign_hash) && count($campaign_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_hash when calling patchVoiceCampaign'
            );
        }
        if (!preg_match("/[a-zA-Z0-9_-]*/", $campaign_hash)) {
            throw new \InvalidArgumentException("invalid value for \"campaign_hash\" when calling VoiceApi.patchVoiceCampaign, must conform to the pattern /[a-zA-Z0-9_-]*/.");
        }

        // verify the required parameter 'voice_patch_campaign' is set
        if ($voice_patch_campaign === null || (is_array($voice_patch_campaign) && count($voice_patch_campaign) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voice_patch_campaign when calling patchVoiceCampaign'
            );
        }

        $resourcePath = '/campaigns/voice/{campaign_hash}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($campaign_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_hash' . '}',
                ObjectSerializer::toPathValue($campaign_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($voice_patch_campaign)) {
            $_tempBody = $voice_patch_campaign;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
